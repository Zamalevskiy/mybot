import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiohttp import web

# === –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ ===
from utils.config import TOKEN

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="Ô∏èüå™ –í –∂–∏–∑–Ω–∏ –±–∞—Ä–¥–∞–∫, –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å", callback_data="chapter_03")
    builder.button(text=" üôÇ –í—Ä–æ–¥–µ –µ—Å—Ç—å –≤—Å—ë, –∞ —Ä–∞–¥–æ—Å—Ç–∏ –Ω–µ—Ç", callback_data="chapter_04")
    builder.button(text=" üíî –ü—É—Å—Ç–æ –≤–Ω—É—Ç—Ä–∏. –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ –∏ –±–æ–ª—å", callback_data="chapter_05")
    builder.button(text=" üòî –£—Å—Ç–∞–ª–∞ –±—ã—Ç—å —Å–∏–ª—å–Ω–æ–π, —Ö–æ—á—É –ø–æ–∫–æ—è", callback_data="chapter_06")
    builder.button(text=" üë§ –û–±–æ –º–Ω–µ", callback_data="chapter_02")
    builder.adjust(1)

    text = (
        "<b>üå™Ô∏è –í –∂–∏–∑–Ω–∏ –±–∞—Ä–¥–∞–∫ –∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?</b>\n\n"
        "–ù–µ –±—É–¥—É –≥—Ä—É–∑–∏—Ç—å —Ç–µ–æ—Ä–∏—è–º–∏. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É ‚Äî "
        "—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ.\n\n"
        "<b>–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ —Å–µ–π—á–∞—Å?</b>"
    )

    await message.answer(text, reply_markup=builder.as_markup())


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ ===
from handlers import (
    chapter_01,
    chapter_02,
    chapter_03,
    chapter_04,
    chapter_05,
    chapter_06,
    chapter_07,
    chapter_08,
    chapter_09,
    chapter_10,
    chapter_11,
    chapter_12,
    chapter_13,
    chapter_14,
    chapter_15,
    chapter_16,
    chapter_18,
    chapter_19,
    chapter_20,
)

# === –†–∞–∑–¥–µ–ª 17 (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ chapters) ===
from chapters.chapter_17 import send_reminder

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
dp.include_router(chapter_01.router)
dp.include_router(chapter_02.router)
dp.include_router(chapter_03.router)
dp.include_router(chapter_04.router)
dp.include_router(chapter_05.router)
dp.include_router(chapter_06.router)
dp.include_router(chapter_07.router)
dp.include_router(chapter_08.router)
dp.include_router(chapter_09.router)
dp.include_router(chapter_10.router)
dp.include_router(chapter_11.router)
dp.include_router(chapter_12.router)
dp.include_router(chapter_13.router)
dp.include_router(chapter_14.router)
dp.include_router(chapter_15.router)
dp.include_router(chapter_16.router)
dp.include_router(chapter_18.router)
dp.include_router(chapter_19.router)
dp.include_router(chapter_20.router)


# === HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–ø–æ—Ä—Ç 10000) ===
async def handle_root(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def run_webserver():
    app = web.Application()
    app.router.add_get("/", handle_root)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 10000)  # Render —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    await site.start()
    print("Web server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    asyncio.create_task(run_webserver())
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
