import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
import os

# === –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ===
from utils.config import TOKEN

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ ===
MODE = os.getenv("MODE", "LOCAL")  # –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: LOCAL –∏–ª–∏ RENDER
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL Render-—Å–µ—Ä–≤–∏—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è RENDER)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üå™ –í –∂–∏–∑–Ω–∏ –±–∞—Ä–¥–∞–∫, –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å", callback_data="chapter_03")
    builder.button(text="üôÇ –í—Ä–æ–¥–µ –µ—Å—Ç—å –≤—Å—ë, –∞ —Ä–∞–¥–æ—Å—Ç–∏ –Ω–µ—Ç", callback_data="chapter_04")
    builder.button(text="üíî –ü—É—Å—Ç–æ –≤–Ω—É—Ç—Ä–∏. –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ –∏ –±–æ–ª—å", callback_data="chapter_05")
    builder.button(text="üòî –£—Å—Ç–∞–ª–∞ –±—ã—Ç—å —Å–∏–ª—å–Ω–æ–π, —Ö–æ—á—É –ø–æ–∫–æ—è", callback_data="chapter_06")
    builder.button(text="üë§ –û–±–æ –º–Ω–µ", callback_data="chapter_02")
    builder.adjust(1)

    text = (
        "<b>üå™Ô∏è –í –∂–∏–∑–Ω–∏ –±–∞—Ä–¥–∞–∫ –∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?</b>\n\n"
        "–ù–µ –±—É–¥—É –≥—Ä—É–∑–∏—Ç—å —Ç–µ–æ—Ä–∏—è–º–∏. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É ‚Äî "
        "—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ.\n\n"
        "<b>–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ —Å–µ–π—á–∞—Å?</b>"
    )
    await message.answer(text, reply_markup=builder.as_markup())


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ ===
from handlers import (
    chapter_01, chapter_02, chapter_03, chapter_04, chapter_05, chapter_06,
    chapter_07, chapter_08, chapter_09, chapter_10, chapter_11, chapter_12,
    chapter_13, chapter_14, chapter_15, chapter_16, chapter_18, chapter_19,
    chapter_20
)
from chapters.chapter_17 import send_reminder

# === –†–æ—É—Ç–µ—Ä—ã ===
routers = [
    chapter_01.router, chapter_02.router, chapter_03.router, chapter_04.router,
    chapter_05.router, chapter_06.router, chapter_07.router, chapter_08.router,
    chapter_09.router, chapter_10.router, chapter_11.router, chapter_12.router,
    chapter_13.router, chapter_14.router, chapter_15.router, chapter_16.router,
    chapter_18.router, chapter_19.router, chapter_20.router
]
for r in routers:
    dp.include_router(r)


# === Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def handle_webhook(request):
    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return web.Response(status=200)


# === HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def run_webserver():
    app = web.Application()
    app.router.add_post(f"/webhook/{TOKEN}", handle_webhook)
    app.router.add_get("/", lambda request: web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"))

    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"üåê Web server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    return runner


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ===
async def setup_webhook():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook/{TOKEN}")
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}/webhook/{TOKEN}")


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    if MODE == "LOCAL":
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ LOCAL (polling)...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    else:
        print("üåê –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ RENDER (webhook)...")
        await setup_webhook()
        runner = await run_webserver()
        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await bot.session.close()
            await runner.cleanup()
            print("‚úÖ –°–µ—Å—Å–∏—è –∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç—ã.")


# === –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ asyncio ===
if MODE == "LOCAL":
    if __name__ == "__main__":
        asyncio.run(main())
# === –î–ª—è Render ===
else:
    # Render –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å uvicorn:
    # –∫–æ–º–∞–Ω–¥–æ–π —Ç–∏–ø–∞:
    # uvicorn bot:app --host 0.0.0.0 --port $PORT
    app = web.Application()
    app.router.add_post(f"/webhook/{TOKEN}", handle_webhook)
    app.router.add_get("/", lambda request: web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"))




if __name__ == "__main__":
    asyncio.run(main())
